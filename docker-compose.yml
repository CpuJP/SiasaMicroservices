version: '3.9'

services:
  #DATABASE para SIASA_PRINCIPAL
  #DB
  siasa-principal-db:
    container_name: siasa-principal-db #Nombre del contenedor que aparece en Docker
    image: postgres:16-alpine #Imagen para cosntruir el servicio
    ports:
      - '5432:5432' #Puerto de salida, Puerto interno del contenedor
    environment:
      POSTGRES_USER: postgres #Variables de entorno para la configuración de la base de datos (Usuario)
      POSTGRES_PASSWORD: postgres #Variables de entorno para la configuración de la base de datos (Contraseña)
      POSTGRES_DB: siasa-principal #Variables de entorno para la configuración de la base de datos (Nombre de la base de datos)
      TZ: 'America/Bogota' #Variable de entorno para decirle al contenedor la zona horaria que debe seguir
    volumes:
      - postgres_data_principal:/var/lib/postgresql/data #Ruta para persistir datos sin importar si el contenedor se borra
    networks:
      - 'siasa-network' #Network a la cual estará conectada internamente con los otros contenedores

  # DATABASE para SIASA-PRESTAMOS
  #DB
  siasa-prestamos-db:
    container_name: siasa-prestamos-db #Nombre del contenedor que aparece en Docker
    image: postgres:16-alpine #Imagen para cosntruir el servicio
    ports:
      - '5433:5432' #Puerto de salida, Puerto interno del contenedor
    environment:
      POSTGRES_USER: postgres #Variables de entorno para la configuración de la base de datos (Usuario)
      POSTGRES_PASSWORD: postgres #Variables de entorno para la configuración de la base de datos (Contraseña)
      POSTGRES_DB: siasa-prestamos #Variables de entorno para la configuración de la base de datos (Nombre de la base de datos)
      TZ: 'America/Bogota' #Variable de entorno para decirle al contenedor la zona horaria que debe seguir
    volumes:
      - postgres_data_prestamos:/var/lib/postgresql/data #Ruta para persistir datos sin importar si el contenedor se borra
    networks:
      - 'siasa-network' #Network a la cual estará conectada internamente con los otros contenedores 

  # DATABASE para SIASA-AUTH
  #DB
  siasa-auth-db:
    container_name: siasa-auth-db #Nombre del contenedor que aparece en Docker
    image: postgres:16-alpine #Imagen para cosntruir el servicio
    ports:
     - '5434:5432'
    environment:
      POSTGRES_USER: postgres #Variables de entorno para la configuración de la base de datos (Usuario)
      POSTGRES_PASSWORD: postgres #Variables de entorno para la configuración de la base de datos (Contraseña)
      POSTGRES_DB: siasa-auth #Variables de entorno para la configuración de la base de datos (Nombre de la base de datos)
      TZ: 'America/Bogota' #Variable de entorno para decirle al contenedor la zona horaria que debe seguir
    volumes:
      - postgres_data_auth:/var/lib/postgresql/data #Ruta para persistir datos sin importar si el contenedor se borra
    networks:
      - 'siasa-network'

  # -----SIASA-ZIPKIN-----
  #THIRD PARTY SERVICE
  siasa-zipkin-service:
    container_name: siasa-zipkin-service #Nombre del contenedor que aparece en Docker
    image: openzipkin/zipkin #Imagen para cosntruir el servicio
    ports:
      - '9411:9411'
    networks:
      - 'siasa-network' #Network a la cual estará conectada internamente con los otros contenedores
  
  # -----SIASA-PROMETHEUS-----
  #THIRD PARTY SERVICE
  siasa-prometheus-service:
    container_name: siasa-prometheus-service #Nombre del contenedor que aparece en Docker
    image: prom/prometheus #Imagen para cosntruir el servicio
    ports:
     - '9090:9090'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - 'siasa-network'

  # -----SIASA-GRAFANA-----
  #THIRD PARTY SERVICE
  siasa-grafana-service:
    container_name: siasa-grafana-service #Nombre del contenedor que aparece en Docker
    image: grafana/grafana-enterprise #Imagen para cosntruir el servicio
    ports:
      - '3000:3000'
    networks:
      - 'siasa-network'

  # -----SIASA-EUREKA-----
  #SERVICE
  siasa-eureka-service:
    container_name: siasa-eureka-service #Nombre del contenedor que aparece en Docker
    image: cpujuan/siasa-eureka-service:2.0 #Imagen para cosntruir el servicio
    build: . #Se construye desde la raíz
    ports:
      - '8761:8761' #Puerto de salida, Puerto interno del contenedor
    environment:
      - spring.profiles.active=prod #variable de entorno que consume el servicio (Activar la configuración de producción del servicio)
    depends_on:
      - siasa-zipkin-service
    networks:
      - 'siasa-network' #Network a la cual estará conectada internamente con los otros contenedores

  # -----SIASA-AUTH-----
  #APP
  siasa-auth-app:
    container_name: siasa-auth-app #Nombre del contenedor que aparece en Docker
    image: cpujuan/siasa-auth-app:2.0 #Imagen para cosntruir el servicio
    build: .
    ports:
      - '8489:8489'
    environment:
      - PROD_AUTH_DB_HOST=siasa-auth-db
      - PROD_AUTH_DB_PORT=5432
      - PROD_AUTH_DB_NAME=siasa-auth
      - PROD_AUTH_DB_USERNAME=postgres
      - PROD_AUTH_DB_PASSWORD=postgres
      - JWT_KEY_SECRET=C977391AE834F8CCD257DA8A2B9398B4BA415C21B6BD1B566997661D46819B6253192F5D1249EB329416EB936494C9F5BBA514761B5833B9C47E
      - ROOT_NAME=Siasa
      - ROOT_EMAIL=cpujuanpis@gmai.com
      - ROOT_PASSWORD=Siasa2024*
      - spring.profiles.active=prod #variable de entorno que consume el servicio (Activar la configuración de producción del servicio)
    depends_on:
      - siasa-auth-db
      - siasa-eureka-service #Este contenedor depende del servicio de eureka para poder funcionar correctamente
    networks:
      - 'siasa-network'

  # -----SIASA-PRINCIPAL-----
  #APP
  siasa-principal-app:
    container_name: siasa-principal-app #Nombre del contenedor que aparece en Docker
    image: cpujuan/siasa-principal-app:2.2 #magen para cosntruir el servicio
    build: . #Se construye desde la raíz
    ports:
      - '8484:8484' #Puerto de salida, Puerto interno del contenedor
    environment:
      - PROD_DB_HOST=siasa-principal-db #variable de entorno que consume el servicio (Host de la base de datos)
      - PROD_DB_PORT=5432 #variable de entorno que consume el servicio (Puerto de conexión de la base de datos)
      - PROD_DB_NAME=siasa-principal #variable de entorno que consume el servicio (Nombre de la base de datos)
      - PROD_DB_USERNAME=postgres #variable de entorno que consume el servicio (Usuario de acceso a la base de datos)
      - PROD_DB_PASSWORD=postgres #variable de entorno que consume el servicio (Contraseña de acceso a la base de datos)
      - spring.profiles.active=prod #variable de entorno que consume el servicio (Activar la configuración de producción del servicio)
      - TZ=America/Bogota #Variable de entorno para decirle al contenedor la zona horaria que debe seguir
    depends_on:
      - siasa-principal-db #Este contenedor depende de la base de datos para poder funcionar correctamente
      - siasa-eureka-service #Este contenedor depende del servicio de eureka para poder funcionar correctamente
    networks:
      - 'siasa-network' #Network a la cual estará conectada internamente con los otros contenedores

  # -----SIASA-PRINCIPAL-FAILOVER-----
  #APP
  siasa-principal-failover-app:
    container_name: siasa-principal-failover-app #Nombre del contenedor que aparece en Docker
    image: cpujuan/siasa-principal-failover-app:2.2 #Imagen para cosntruir el servicio
    build: . #Se construye desde la raíz
    ports:
      - '8488:8488' #Puerto de salida, Puerto interno del contenedor
    environment:
      - PROD_DB_HOST=siasa-principal-db #variable de entorno que consume el servicio (Host de la base de datos)
      - PROD_DB_PORT=5432 #variable de entorno que consume el servicio (Puerto de conexión de la base de datos)
      - PROD_DB_NAME=siasa-principal #variable de entorno que consume el servicio (Nombre de la base de datos)
      - PROD_DB_USERNAME=postgres #variable de entorno que consume el servicio (Usuario de acceso a la base de datos)
      - PROD_DB_PASSWORD=postgres #variable de entorno que consume el servicio (Contraseña de acceso a la base de datos)
      - spring.profiles.active=prod #variable de entorno que consume el servicio (Activar la configuración de producción del servicio)
      - TZ=America/Bogota #Variable de entorno para decirle al contenedor la zona horaria que debe seguir
    depends_on:
      - siasa-principal-db #Este contenedor depende de la base de datos para poder funcionar correctamente
      - siasa-eureka-service #Este contenedor depende del servicio de eureka para poder funcionar correctamente
    networks:
      - 'siasa-network' #Network a la cual estará conectada internamente con los otros contenedores

  # -----SIASA-PRESTAMOS-----
  # APP
  siasa-prestamos-app:
    container_name: siasa-prestamos-app #Nombre del contenedor que aparece en Docker
    image: cpujuan/siasa-prestamos-app:2.0 #Imagen para cosntruir el servicio
    build: . #Se construye desde la raíz
    ports:
      - '8485:8485' #Puerto de salida, Puerto interno del contenedor
    environment:
      - PROD_P_DB_HOST=siasa-prestamos-db #variable de entorno que consume el servicio (Host de la base de datos)
      - PROD_P_DB_PORT=5432 #variable de entorno que consume el servicio (Puerto de conexión de la base de datos)
      - PROD_P_DB_NAME=siasa-prestamos #variable de entorno que consume el servicio (Nombre de la base de datos)
      - PROD_P_DB_USERNAME=postgres #variable de entorno que consume el servicio (Usuario de acceso a la base de datos)
      - PROD_P_DB_PASSWORD=postgres #variable de entorno que consume el servicio (Contraseña de acceso a la base de datos)
      - spring.profiles.active=prod #variable de entorno que consume el servicio (Activar la configuración de producción del servicio)
      - TZ=America/Bogota #Variable de entorno para decirle al contenedor la zona horaria que debe seguir
      - API_SIASA_PRINCIPAL_BY_RFID=http://siasa-principal-app:8484/codigou/rfid/{idRfid} #variable de entorno que consume el servicio (Consumo API Externa)
      - API_SIASA_EXISTS_RFID=http://siasa-principal-app:8484/rfid/{id} #variable de entorno que consume el servicio (Consumo API Externa)
      - API_SIASA_EXISTS_UDEC=http://siasa-principal-app:8484/codigou/{id} #variable de entorno que consume el servicio (Consumo API Externa)
    depends_on:
      - siasa-prestamos-db #Este contenedor depende de la base de datos para poder funcionar correctamente
      - siasa-principal-app #Este contenedor depende del contenedor derl servicio principal para funcionar correctamente
      - siasa-principal-failover-app
      - siasa-eureka-service #Este contenedor depende del servicio de eureka para poder funcionar correctamente
    networks:
      - 'siasa-network' #Network a la cual estará conectada internamente con los otros contenedores

  # -----SIASA-REPORTES-----
  # APP
  siasa-reportes-app:
    container_name: siasa-reportes-app #Nombre del contenedor que aparece en Docker
    image: cpujuan/siasa-reportes-app:2.0 #Imagen para cosntruir el servicio
    build: . #Se construye desde la raíz
    ports:
      - '8486:8486' #Puerto de salida, Puerto interno del contenedor
    environment:
      - PROD_DB_HOST=siasa-principal-db #variable de entorno que consume el servicio (Host de la base de datos)
      - PROD_DB_PORT=5432 #variable de entorno que consume el servicio (Puerto de conexión de la base de datos)
      - PROD_DB_NAME=siasa-principal #variable de entorno que consume el servicio (Nombre de la base de datos)
      - PROD_DB_USERNAME=postgres #variable de entorno que consume el servicio (Usuario de acceso a la base de datos)
      - PROD_DB_PASSWORD=postgres #variable de entorno que consume el servicio (Contraseña de acceso a la base de datos)
      - spring.profiles.active=prod #variable de entorno que consume el servicio (Activar la configuración de producción del servicio)
      - TZ=America/Bogota #Variable de entorno para decirle al contenedor la zona horaria que debe seguir
    depends_on:
      - siasa-principal-db #Este contenedor depende de la base de datos para poder funcionar correctamente
      - siasa-eureka-service #Este contenedor depende del servicio de eureka para poder funcionar correctamente
    networks:
      - 'siasa-network' #Network a la cual estará conectada internamente con los otros contenedores

  # -----SIASA-GATEWAY-----
  #SERVICE
  siasa-gateway-service:
    container_name: siasa-gateway-service #Nombre del contenedor que aparece en Docker
    image: cpujuan/siasa-gateway-service:2.2 #Imagen para cosntruir el servicio
    build: . #Se construye desde la raíz
    ports:
      - '8487:8487' #Puerto de salida, Puerto interno del contenedor
    environment:
      - spring.profiles.active=prod #variable de entorno que consume el servicio (Activar la configuración de producción del servicio)
    depends_on:
      - siasa-eureka-service #Este contenedor depende del servicio de eureka para poder funcionar correctamente
      - siasa-principal-app #Este contenedor depende del servicio principal para poder funcionar correctamente
      - siasa-prestamos-app #Este contenedor depende del servicio de prestamos para poder funcionar correctamente
      - siasa-reportes-app #Este contenedor depende del servicio de reportes para poder funcionar correctamente
      - siasa-principal-failover-app #Este contenedor depende de failover de reportes para poder funcionar correctamente
    networks:
      - 'siasa-network' #Network a la cual estará conectada internamente con los otros contenedores

  # REACT FRONT 
  siasa-react-front:
    container_name: siasa-react-front #Nombre del contenedor que aparece en Docker
    image: crisfer23/siasa-react-front:2.5.2 #Imagen para cosntruir el servicio
    ports:
      - '3001:3001' #Puerto de la aplicación React
    depends_on:
      - siasa-gateway-service #Dependencia del servicio de gateway

#Networks
networks:
  siasa-network:
   driver: bridge

#Volumes
volumes:
  postgres_data_principal: #Se le informa docker-compose que debe tener una ruta para su creación
  postgres_data_prestamos: #Se le informa docker-compose que debe tener una ruta para su creación
  postgres_data_auth: #Se le informa docker-compose que debe tener una ruta para su creación
